import json

from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import create_start_link, decode_payload
from keyboards.inlines import *
from lexicon import lexicon_ru
from aiogram import Router, Bot, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery
from config_data.config import Config, load_config
from keyboards.inlines import MyCallback

storage = MemoryStorage() # —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π

config: Config = load_config()

router = Router()


with open('user_dict.json', 'r') as f:      # —Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    try:
        user_dict = json.load(f)
    except json.decoder.JSONDecodeError as err:
        print(f'                  {err}                                    ')


class FSM(StatesGroup):                      # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    fill_message = State()                   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–µ–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    fill_link = State()                      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–µ–µ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞


def check_dict(payload):                    # —Ñ—É–Ω-—è –ø–æ–∏—Å–∫–∞ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É 
    for k,v in user_dict.items():           # –≤ —Å–ª–æ–≤–∞—Ä–µ
        if v['payload'] == payload:
            return k

def get_payload(user):                      # —Ñ—É–Ω-—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∏–∫–∞ 
    payload = user_dict[user]['payload']    # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    if payload == '': return user           # –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    else: return payload

@router.message(CommandStart(deep_link=True))    # –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —á—å–µ–π-—Ç–æ —Å—Å—ã–ª–∫–µ
async def process_deep_command(message: Message, bot: Bot, state: FSMContext):
    args = message.text.split()
    recipient = check_dict(args[1]) # –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤(–∏–∑ deep_link) –±–µ—Ä–µ–º id –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    sender = str(message.from_user.id) # id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if str(recipient) == sender:        # –µ—Å–ª–∏ –ø—ã—Ç–∞–µ—à—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ
        deep_link = await create_start_link(bot,payload=get_payload(sender) # —Å–æ–∑–¥ —Å—Å—ã–ª—å
        await message.answer(  # –≤—ã–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Å—ã–ª—å
                text = f'{lexicon_ru.LEXICON_RU["/cancel_but_text"]} {str(deep_link)}'
        )
    else:
        await bot.send_message(        # –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            sender,
            text=lexicon_ru.LEXICON_RU['/deep_start'],
            reply_markup=create_inline_cancel(), # –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã 
            parse_mode='HTML'
        )
        await state.update_data(recipient=recipient, sender=sender) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id
        await state.set_state(FSM.fill_message)    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 
                                                   # –æ–∂–∏–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 

@router.message(StateFilter(FSM.fill_link))        # —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É
async def process_get_link(message: Message, bot: Bot, state: FSMContext):
    user = message.from_user.id   # —Å—á–∏—Ç–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    payload = message.text       # —Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∏–∫ 
    if check_dict(payload):      # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏
        await bot.send_message(  # —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ –Ω–∏–∫ –∑–∞–Ω—è—Ç
            user
            text = lexicon_ru.LEXICON_RU['get_link_true']
        )
        await state.set_state(FSM.fill_link) # —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–º–µ–Ω—ã —Å—Å—ã–ª–∫–∏
    else:
        old_link = await create_start_link(bot, user) # —Å—Å—ã–ª—å —Å id
        deep_link = await create_start_link(bot, payload) # —Å—Å—ã–ª—å —Å –Ω–∏–∫–æ–º
        await bot.send_message(
            message.from_user.id,
            text = f'{lexicon_ru.LEXICON_RU["get_link_false"]}'.format(payload,deep_link, old_link)
        )
        await bot.send_message(   # –∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user,
            text=lexicon_ru.LEXICON_RU['/start']+
                  str(deep_link) +"\n\n"+
                  lexicon_ru.LEXICON_RU['/start 1'],
            reply_markup=create_inline_keyboards()
        )

        user_dict[str(message.from_user.id)]['payload'] = payload # —Å–æ—Ö—Ä–∞–Ω–∏–º –Ω–∏–∫ 
        with open('user_dict.json', 'w') as f:                    # –≤ —Å–ª–æ–≤–∞—Ä—å
            json.dump(user_dict, f, indent=4, ensure_ascii=False) # –∏ –≤ —Ñ–∞–π–ª


@router.message(StateFilter(FSM.fill_message)) # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
async def process_recipient(message: Message, bot: Bot, state: FSMContext):
    data = await state.get_data()  # —Å—á–∏—Ç—ã–≤–∞–µ–º state
    recipient, sender = data['recipient'], data['sender']
    if 'answer' in data:  # –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ 
        message.answer(   # —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
            text = f'{lexicon_ru.LEXICON_RU["answer_send"]}'
        )
        deep_link = await create_start_link(bot=bot, payload=get_payload(sender) # —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª—å
        await bot.send_message(  # –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user,
            text=lexicon_ru.LEXICON_RU['/start']+
                  str(deep_link) +"\n\n"+
                  lexicon_ru.LEXICON_RU['/start 1'],
            reply_markup=create_inline_keyboards()
        )

    else:            # –µ—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç, –∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ
        await bot.send_message( # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            recipient,
            text = f'{lexicon_ru.LEXICON_RU["get_message"]}\n\n'
                   f'{message.text}\n',
            reply_markup=create_options_message(sender) # –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        )                                               # –∏ –ø–ª–∞—Ç–Ω–æ–π –æ–ø—Ü–∏–∏
        if int(recipient) in config.tg_bot.admin_ids:  # –µ—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ 
            await bot.send_message(                    # –∞–¥–º–∏–Ω–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫ 
                recipient,                             # –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                text = f'üëÜ {message.from_user.first_name} --> <a href="tg://user?id={message.from_user.id}">@{message.from_user.username}</a>',
                parse_mode='HTML'
            )
    user_dict[recipient]['count_in']+=1        # –∏—Ç–µ—Ä–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π 
    user_dict[sender]["count_out"]+=1          # –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    with open('user_dict.json', 'w') as f:   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–∞–π–ª
        json.dump(user_dict, f, indent=4, ensure_ascii=False) 
    await state.clear()            # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@router.callback_query(F.data == '/start') # —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–º–µ–Ω—ã
async def process_start_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.answer()          # –æ—Ç–∫–ª –∞–Ω–∏–º–∞—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
    user = call.from_user.id     # –±–µ—Ä–µ–º id —é–∑–µ—Ä–∞
    deep_link = await create_start_link(bot=bot, payload=get_payload(user))
    await bot.send_message(   # —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user,
        text=lexicon_ru.LEXICON_RU['/start']+
              str(deep_link) +"\n\n"+
              lexicon_ru.LEXICON_RU['/start 1'],
        reply_markup=create_inline_keyboards()
    )


@router.message(CommandStart()) # —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ –∏–∑ –º–µ–Ω—é
async def process_start_command(call: CallbackQuery, bot: Bot, state: FSMContext):
    user = str(call.from_user.id) # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if str(user) in user_dict:   # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä–µ
        deep_link = await create_start_link(bot=bot, payload=get_payload(user))
    else:  # –µ—Å–ª–∏ –Ω–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–æ–±–∞–≤–ª—è–µ–º
        user_dict[user] = {"payload":"",
                           "count_in":0,
                           "count_out":0}
        deep_link = await create_start_link(bot=bot, payload=user) # —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª—å
    await bot.send_message(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user,
        text=lexicon_ru.LEXICON_RU['/start']+
              str(deep_link) +"\n\n"+
              lexicon_ru.LEXICON_RU['/start 1'],
        reply_markup=create_inline_keyboards()
    )


@router.callback_query(F.data=='/stat') # –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def process_stat(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.answer()
    user = call.from_user.id # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    input_msg = user_dict[user]["count_in"] # —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ
    output_msg = user_dict[user]["count_out"] # —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    c_worse_in = 0
    c_worse_out = 0

    for x in user_dict:  # —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª-–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        if user_dict[x]["count_out"] < output_msg: 
            c_worse_out+=1
            print(f' y["count_out"] --> {y["count_out"]}')

        if user_dict[x]["count_in"] < input_msg: c_worse_in+=1
    
    persent_out = c_worse_out/len(user_dict)*100 # —Å—á–∏—Ç–∞–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫—Ä—É—á–µ
    persent_in = c_worse_in/len(user_dict)*100
    try:
        persent = 2/(persent_out+persent_in)
    except Exception as e: print(f'-------{e}-------')
    await call.message.answer(  # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        text=f'{lexicon_ru.LEXICON_RU["/stat"]}'.format(input_msg, output_msg,0,0, deep_link,),
        reply_markup=create_inline_back() # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    )

@router.callback_query(F.data=='/more_message') # –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ " –ë–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π "
async def process_more_message(call: CallbackQuery, bot: Bot):
    user = call.from_user.id
    deep_link = await create_start_link(bot=bot,payload=get_payload(user))
    await call.answer() # "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ" –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await call.message.answer( # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Å—Ç–∞–≤–∏–ª—è—Ç—å —Å—Å—ã–ª–∫—É –≤–µ–∑–¥–µ
        text=lexicon_ru.LEXICON_RU['/more_message']+
              str(deep_link) +"\n\n"+
              lexicon_ru.LEXICON_RU['/more_message1'],
        reply_markup=create_more_message_inline(), # –∫–Ω–æ–ø–∫–∏
        parse_mode='HTML'
    )


@router.callback_query(F.data=='/change_link') # –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Å—Å—ã–ª–∫–∏ (–Ω–∏–∫)
async def process_change_link(call: CallbackQuery, bot: Bot, state: FSMContext):
    recipient = call.from_user.id   # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deep_link = create_start_link(bot=bot, payload=get_payload(recipient)
    await call.answer() # "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ" –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await bot.send_message( # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏
        recipient,
        text = f'{lexicon_ru.LEXICON_RU["/change_link_text"]}'.format(recipient,deep_link),
        reply_markup = create_change_options()
    )


@router.callback_query(F.data=='/change') # –Ω–∞–∂–∞—Ç–∏–µ —Å–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É
async def process_change_but(call: CallbackQuery, bot: Bot, state: FSMContext):
    recipient = call.from_user.id
    await call.answer() # "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ" –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await bot.send_message( # –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫
        recipient,
        text = lexicon_ru.LEXICON_RU['/change'],
        reply_markup = create_inline_cancel()
    )
    await state.set_state(FSM.fill_link) # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞


@router.callback_query(F.data=='get_name') # –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ø–æ–ª—É—á–∏—Ç—å –∏–º—è"
async def process_get_name(call: CallbackQuery, bot: Bot, state: FSMContext):
    recipient = call.from_user.id         # –ø–æ–ª—É—á–∞–µ–º id
    await call.answer()  # –æ—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏
    await bot.send_message( # —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
        recipient,
        text = lexicon_ru.LEXICON_RU['get_name_text']
    )


@router.callback_query(MyCallback.filter(F.foo == 'answer')) # –Ω–∞–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–¥ —Å–æ–æ–±—â
async def process_answer_press(query: CallbackQuery, callback_data: MyCallback, bot: Bot, state: FSMContext):
    await query.answer()  # –æ—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏
    sender = query.from_user.id # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    recipient = callback_data.bar # id —Ç–æ–≥–æ - –∫–æ–º—É –æ—Ç–≤–µ—á–∞–µ–º
    await state.update_data(recipient=recipient, sender=sender) # save id's in state
    await state.update_data(answer='answer') # flag 'answer' save to state
    await state.set_state(FSM.fill_message) # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_message( # –ø—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç
        sender,
        text = lexicon_ru.LEXICON_RU['answer_text'],
        reply_markup = create_inline_cancel()
    )
